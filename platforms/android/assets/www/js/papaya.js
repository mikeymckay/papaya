// Generated by CoffeeScript 1.6.2
var Papaya, RecordAudio, Router, appName, clickortouch, defaultLanguages, directoryPath, router, serverPath, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

appName = "Papaya";

directoryPath = "/sdcard/" + appName;

serverPath = "http://papaya.tangerinecentral.org";

defaultLanguages = ["English", "Kiswahili"];

_.mixin(_.str.exports());

Papaya = (function() {
  function Papaya() {}

  Papaya.updateLanguages = function() {
    var available_languages;

    available_languages = _.keys(Papaya.config.languages);
    return $("#languageSelector").html(_.map(available_languages, function(language) {
      return "<a id='" + language + "' class='language' href='#language/" + language + "'>" + language + "</a>";
    }).join(""));
  };

  Papaya.loadConfig = function(options) {
    var pathToConfig,
      _this = this;

    pathToConfig = "config.json";
    if (Papaya.onPhonegap()) {
      pathToConfig = "file://" + directoryPath + "/" + pathToConfig;
    }
    return $.ajax({
      url: pathToConfig,
      dataType: "json",
      error: function(result) {
        console.log("Error downloading config file from '" + pathToConfig + "': " + (JSON.stringify(result)));
        return options != null ? typeof options.error === "function" ? options.error(result) : void 0 : void 0;
      },
      success: function(result) {
        Papaya.config = result;
        console.log("Successfully loaded config from '" + pathToConfig + "'. Using config: " + (JSON.stringify(Papaya.config)));
        Papaya.updateLanguages();
        return options != null ? typeof options.success === "function" ? options.success(result) : void 0 : void 0;
      }
    });
  };

  Papaya.downloadLanguageJson = function(languages, success) {
    var fileTransfer, targetFile, url,
      _this = this;

    url = "" + serverPath + "/json_package?languages=" + (languages.join(","));
    targetFile = "" + directoryPath + "/config.json";
    fileTransfer = new FileTransfer();
    return fileTransfer.download(url, targetFile, function(data) {
      console.log("Copied " + url + " to " + targetFile);
      return success(data);
    }, function(error) {
      return console.log("Error downloading from " + url + " and saving to " + targetFile + ": " + (JSON.stringify(error)));
    });
  };

  Papaya.downloadLanguageSoundFiles = function() {
    var data, dir, dirsToCreate, filesToCopy, language, onDirsCreated, phoneme, voice, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;

    filesToCopy = [];
    dirsToCreate = [];
    console.log(JSON.stringify(Papaya.config));
    _ref = Papaya.config.languages;
    for (language in _ref) {
      data = _ref[language];
      console.log("" + directoryPath + "/" + language);
      dirsToCreate.push("" + directoryPath + "/" + language);
      _ref1 = data.phonemes;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        phoneme = _ref1[_i];
        _ref2 = data.voices;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          voice = _ref2[_j];
          filesToCopy.push("" + language + "/" + voice + "_" + phoneme + ".mp3");
        }
      }
    }
    onDirsCreated = _.after(dirsToCreate.length, function() {
      var fileTransfer, onCopyComplete;

      console.log("Created " + (JSON.stringify(dirsToCreate)) + " (unless they already existed)");
      onCopyComplete = _.after(filesToCopy.length, function() {
        return console.log("Finished copying " + filesToCopy.length + " files");
      });
      fileTransfer = new FileTransfer();
      return _.each(filesToCopy, function(file) {
        var source, targetFile,
          _this = this;

        source = "" + serverPath + "/uploads/" + file;
        targetFile = "" + directoryPath + "/" + file;
        return fileTransfer.download(source, targetFile, function(data) {
          console.log("Copied " + file + " to " + targetFile);
          return onCopyComplete();
        }, function(error) {
          return console.log("Error downloading from " + source + " and saving to " + targetFile + ": " + (JSON.stringify(error)));
        });
      });
    });
    _results = [];
    for (_k = 0, _len2 = dirsToCreate.length; _k < _len2; _k++) {
      dir = dirsToCreate[_k];
      gapFile.mkDirectory("" + dir);
      _results.push(onDirsCreated());
    }
    return _results;
  };

  Papaya.deletePapayaAssetsIfExists = function(options) {
    console.log("Looking for old Papaya files to delete");
    return window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, function(fileSystem) {
      return fileSystem.root.getDirectory(appName, {
        create: false,
        exclusive: false
      }, function(directoryEntry) {
        return directoryEntry.removeRecursively(function() {
          console.log("Removed " + appName + " directory and all it's contents");
          return typeof options.success === "function" ? options.success() : void 0;
        }, function() {
          console.log("Failed to remove " + appName);
          return typeof options.error === "function" ? options.error() : void 0;
        });
      }, function() {
        console.log("" + appName + " directory does not exist");
        return typeof options.success === "function" ? options.success() : void 0;
      });
    });
  };

  Papaya.initializePhonegapFiles = function() {
    var configPath;

    configPath = "www/config/config.json";
    return window.plugins.asset2sd.startActivity({
      asset_file: "www/config/config.json",
      destination_file_location: appName,
      destination_file: "config.json"
    }, function() {
      console.log("Successfully copied from " + configPath + " to " + appName + ". Waiting half a second before loading it.");
      return _.delay(function() {
        return Papaya.loadConfig({
          error: function(error) {
            console.log("Error loading config file after copying from assets: " + (JSON.stringify(error)));
            throw {
              name: 'LoadConfigError',
              message: "Could not load config file: " + (JSON.stringify(error))
            };
          },
          success: function() {
            var data, fileCount, language, phoneme, reloadAfterAllFilesTransferred, voice, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _results;

            fileCount = 0;
            _ref = Papaya.config.languages;
            for (language in _ref) {
              data = _ref[language];
              _ref1 = data.phonemes;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                phoneme = _ref1[_i];
                _ref2 = data.voices;
                for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                  voice = _ref2[_j];
                  fileCount += 1;
                }
              }
            }
            reloadAfterAllFilesTransferred = _.after(fileCount, function() {
              return document.location.reload();
            });
            _ref3 = Papaya.config.languages;
            _results = [];
            for (language in _ref3) {
              data = _ref3[language];
              _results.push((function() {
                var _k, _len2, _ref4, _results1;

                _ref4 = data.phonemes;
                _results1 = [];
                for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
                  phoneme = _ref4[_k];
                  _results1.push((function() {
                    var _l, _len3, _ref5, _results2;

                    _ref5 = data.voices;
                    _results2 = [];
                    for (_l = 0, _len3 = _ref5.length; _l < _len3; _l++) {
                      voice = _ref5[_l];
                      _results2.push(window.plugins.asset2sd.startActivity({
                        asset_file: "www/languages/" + language + "/" + voice + "_" + phoneme + ".mp3",
                        destination_file_location: "" + appName + "/" + language,
                        destination_file: "" + voice + "_" + phoneme + ".mp3"
                      }, function() {
                        reloadAfterAllFilesTransferred();
                        console.log("Copied www/" + language + "/" + voice + "_" + phoneme + ".mp3");
                        return $("body").append("Copied www/" + language + "/" + voice + "_" + phoneme + ".mp3");
                      }, function(error) {
                        return console.log("ERROR: Could not copy www/" + language + "/" + voice + "_" + phoneme + ".mp3: " + (JSON.stringify(error)));
                      }));
                    }
                    return _results2;
                  })());
                }
                return _results1;
              })());
            }
            return _results;
          }
        });
      }, 500);
    }, function() {
      return console.log("Failed to initialize config.json");
    });
  };

  Papaya.onPhonegap = function() {
    return document.URL.indexOf('http://') === -1 && document.URL.indexOf('https://') === -1;
  };

  Papaya.updatePhonemes = function() {
    var phonemes;

    phonemes = $("#availablePhonemes").val().split(/, */);
    $('#phonemeSelector').html(_.map(phonemes, function(phoneme) {
      return "<span class='phoneme-button button'>" + phoneme + "</span> ";
    }).join(""));
    $('#phonemeSelector').append("      <span class='phoneme-button button meta'>space</span>      <span class='phoneme-button button meta'>delete</span>      <span class='phoneme-button button meta'>clear</span>      <span id='shift' class='phoneme-button button meta'>shift</span>      <!--      This works but removed in case of confusion      <span id='playSounds' class='phoneme-button button meta'>play</span>      -->      <br/>      <br/>      <span id='recording-buttons'>        <span id='record-start-stop' class='button record'>record my voice</span>        <span id='record-play' style='display:none' class='button record'>play my voice</span>      </span>    ");
    $("#record-start-stop").click(function() {
      if ($("#record-start-stop").html() === "record my voice") {
        return Papaya.record();
      } else {
        return Papaya.stop();
      }
    });
    return $("#record-play").click(function() {
      if ($("#record-play").html() === "play my voice") {
        $("#record-play").html("stop playing my voice");
        return Papaya.recorder.play({
          done: function() {
            $("#record-play").removeClass("playing");
            return $("#record-play").html("play my voice");
          }
        });
      } else {
        $("#record-play").removeClass("playing");
        $("#record-play").html("play my voice");
        return Papaya.recorder.stop();
      }
    });
  };

  Papaya.updateCreatedWordsDivSize = function() {
    var heightMultiplier;

    if ($(window).width() > $(window).height()) {
      heightMultiplier = .3;
    } else {
      heightMultiplier = .3;
    }
    $('#createdWords').css({
      width: $(window).width() - 20,
      height: $(window).height() * heightMultiplier
    });
    $('#createdWords').html($('#createdWords').text());
    return $('#createdWords').boxfit();
  };

  Papaya.play = function(filename, button) {
    var url, _ref;

    if (Papaya.onPhonegap()) {
      if ((_ref = Papaya.media) != null) {
        _ref.release();
      }
      button.addClass("playing");
      url = "" + directoryPath + "/" + ($("a.language.selected").text()) + "/" + filename;
      console.log("Playing " + url);
      Papaya.media = new Media(url, function() {
        return button.removeClass("playing");
      });
      return Papaya.media.play();
    } else {
      $("#jplayer").jPlayer("setMedia", {
        mp3: "sounds/" + ($("a.language.selected").text()) + "/" + filename
      });
      return $("#jplayer").jPlayer("play");
    }
  };

  Papaya.record = function() {
    $("#record-start-stop").addClass("recording");
    $("#record-start-stop").html("stop recording");
    Papaya.recorder.record();
    return this.autoStop = _.delay(this.stop, Papaya.config.maxRecordTime);
  };

  Papaya.stop = function() {
    $("#record-start-stop").removeClass("recording");
    $("#record-start-stop").html("record my voice");
    Papaya.recorder.stop();
    return clearTimeout(this.autoStop);
  };

  return Papaya;

})();

Router = (function(_super) {
  __extends(Router, _super);

  function Router() {
    _ref = Router.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Router.prototype.routes = {
    "": "default",
    "downloadLanguages": "downloadLanguages",
    "joinPhonemes": "joinPhonemes",
    "availablePhonemes": "availablePhonemes",
    "listenPhonemes": "listenPhonemes",
    "language/:language": "changeLanguage",
    "selectLanguage": "selectLanguage"
  };

  Router.prototype.downloadLanguages = function() {
    var available_languages;

    $("#downloadLanguages").show();
    $("#downloadLanguages").html("      <div>      Currently Loaded Languages:<br/>      " + (available_languages = _.keys(Papaya.config.languages), _.map(available_languages, function(language) {
      return "" + language;
    }).join("<br/>")) + "      </div>      <br/>      <div>        Languages available for update/download: <div id='languages_available_for_downloading'></div>      </div>      <button type='button' id='add_update_selected_languages'>Add/update selected languages</button>    ");
    return $.ajax({
      url: "" + serverPath + "/languages",
      dataType: "json",
      error: function(error) {
        return console.log(JSON.stringify(error));
      },
      success: function(result) {
        return $('#languages_available_for_downloading').html("            " + (_.map(result, function(language) {
          return "                <label for='download-" + language + "'>" + language + "</label>                <input id='download-" + language + "' value='" + language + "' class='check' type='checkbox'                   " + (_.contains(available_languages, language) ? 'checked=\'true\'' : '') + "></input><br/>                ";
        }).join("")) + "        ");
      }
    });
  };

  Router.prototype.updateLanguage = function() {
    Papaya.updatePhonemes();
    $(".phoneme-selector").hide();
    $(".created-words").hide();
    $("span.meta").hide();
    $(".listen-phonemes").hide();
    $("#recording-buttons").hide();
    return $("#voice-selector").hide();
  };

  Router.prototype.changeLanguage = function(language) {
    var languageSettings;

    $("a.language").removeClass("selected");
    $("#" + language).addClass("selected");
    $("a.language").not(".selected").hide();
    languageSettings = Papaya.config.languages[language];
    $('#availablePhonemes').val(languageSettings.phonemes);
    if (typeof languageSettings.onLoad === "function") {
      languageSettings.onLoad();
    }
    $("#voice-selector").html(_.map(languageSettings.voices, function(voice) {
      return "<span class='voice' id='voice-" + voice + "'>" + voice + "</span> ";
    }).join(""));
    $($(".voice")[0]).addClass("selected");
    return this.updateLanguage();
  };

  Router.prototype.selectLanguage = function() {
    return $("a.language").not(".selected").show();
  };

  Router.prototype["default"] = function() {
    $("#content>div").hide();
    $(".listen-phonemes").hide();
    $(".logo").show();
    return $("#voice-selector").hide();
  };

  Router.prototype.availablePhonemes = function() {
    $("#content>div").hide();
    $(".listen-phonemes").hide();
    $(".available-phonemes").show();
    return $("#voice-selector").hide();
  };

  Router.prototype.joinPhonemes = function() {
    $("#content>div").hide();
    $(".listen-phonemes").hide();
    $(".phoneme-selector").show();
    $(".created-words").show();
    $("#recording-buttons").hide();
    $("span.meta").show();
    return $("#voice-selector").hide();
  };

  Router.prototype.listenPhonemes = function() {
    $("#content>div").hide();
    $(".phoneme-selector").show();
    $(".listen-phonemes").show();
    $("#recording-buttons").show();
    $("span.meta").hide();
    return $("#voice-selector").show();
  };

  return Router;

})(Backbone.Router);

RecordAudio = (function() {
  function RecordAudio() {
    this.play = __bind(this.play, this);
    this.stop = __bind(this.stop, this);
    this.record = __bind(this.record, this);    this.status = "stopped";
    this.filename = "recording.wav";
    if (Papaya.onPhonegap()) {
      this.recordedSound = new Media(this.filename);
    } else {
      Recorder.initialize({
        swfSrc: "js/recorder.swf"
      });
    }
  }

  RecordAudio.prototype.record = function() {
    if (Papaya.onPhonegap()) {
      return this.recordedSound.startRecord();
    } else {
      return Recorder.record();
    }
  };

  RecordAudio.prototype.stop = function() {
    var _ref1;

    if (Papaya.onPhonegap()) {
      this.recordedSound.stopRecord();
      if ((_ref1 = this.media) != null) {
        _ref1.stop();
      }
    } else {
      Recorder.stop();
    }
    return $("#record-play").show();
  };

  RecordAudio.prototype.play = function(options) {
    var _ref1;

    if (Papaya.onPhonegap()) {
      if ((_ref1 = this.media) != null) {
        _ref1.stop();
      }
      this.media = new Media(this.filename, options.done);
      this.media.play();
    } else {
      Recorder.play({
        finished: options.done
      });
    }
    return $("#record-play").addClass("playing");
  };

  return RecordAudio;

})();

$(document).on("change", "#availablePhonemes", Papaya.updatePhonemes);

clickortouch = Papaya.onPhonegap() ? "touchend" : "click";

$(document).on(clickortouch, ".phoneme-button", function(event) {
  var availablePhonemes, button, createdWord, createdWords, delay, endPosition, filename, phoneme, phonemePressed, startPosition;

  switch (Backbone.history.fragment) {
    case "joinPhonemes":
      phonemePressed = $(event.target).text();
      if (phonemePressed === "space") {
        phonemePressed = " ";
      } else if (phonemePressed === "clear") {
        $('#createdWords').html("");
        return;
      } else if (phonemePressed === "delete") {
        $('#createdWords').html($('#createdWords').text().substring(0, $('#createdWords').text().length - 1));
        $('#createdWords').boxfit();
        return;
      } else if (phonemePressed === "shift") {
        $("#shift").toggleClass("shift-active");
        return;
      } else if (phonemePressed === "play") {
        availablePhonemes = $('#availablePhonemes').val().split(/, */);
        createdWord = $('#createdWords').text();
        delay = 0;
        startPosition = 0;
        endPosition = createdWord.length;
        while (startPosition !== endPosition) {
          phoneme = createdWord.substring(startPosition, endPosition);
          if (_.contains(availablePhonemes, phoneme)) {
            startPosition = endPosition;
            endPosition = createdWord.length;
            _.delay(Papaya.play, delay, "female_" + phoneme + ".mp3");
            delay += 1500;
          } else {
            endPosition = endPosition - 1;
          }
        }
        return;
      }
      if ($("#shift").hasClass("shift-active")) {
        phonemePressed = phonemePressed.charAt(0).toUpperCase() + phonemePressed.slice(1);
      }
      createdWords = $('#createdWords').text();
      $('#createdWords').html("" + createdWords + phonemePressed);
      return $('#createdWords').boxfit();
    case "listenPhonemes":
      button = $(event.target);
      phoneme = button.text();
      $("#listen-status").html(phoneme);
      filename = "" + ($("#voice-selector span.selected").text()) + "_" + phoneme + ".mp3";
      Papaya.play(filename, button);
      return _.delay(function() {
        return $("#listen-status").html("");
      }, 1000);
  }
});

$("#voice-selector").on("click", "span", function(event) {
  $(event.target).siblings().removeClass("selected");
  return $(event.target).addClass("selected");
});

$("#downloadLanguages").on("click", "#add_update_selected_languages", function(event) {
  return Papaya.downloadLanguageJson(_.pluck($(".check:checked"), "value"), function() {
    return Papaya.loadConfig({
      error: function(error) {
        return console.log("Error loading config file: " + error);
      },
      success: function() {
        return Papaya.downloadLanguageSoundFiles();
      }
    });
  });
});

$(document).ready(function() {
  return $("#jplayer").jPlayer({
    error: function(error) {
      var filename, phoneme;

      if (error.jPlayer.error.type === "e_url") {
        phoneme = $("#listen-status").text();
        filename = "" + ($("#voice-selector span.selected").text()) + "_" + phoneme + ".mp3";
        return $("#listen-status").append("<br><span style='font-size:20px'>No sound file available (" + filename + ")</span>");
      }
    }
  });
});

Papaya.config = {};

Papaya.updateCreatedWordsDivSize();

window.addEventListener("resize", function() {
  return Papaya.updateCreatedWordsDivSize();
}, false);

router = new Router();

if (Papaya.onPhonegap()) {
  document.addEventListener("deviceready", function() {
    Papaya.recorder = new RecordAudio();
    return Papaya.loadConfig({
      success: function(success) {
        Backbone.history.start();
        console.log(Papaya.config.context !== "Kenya PRIMR" || Papaya.config.version < 1);
        console.log("Loaded config");
        if (Papaya.config.context !== "Kenya PRIMR" || Papaya.config.version < 1) {
          return Papaya.deletePapayaAssetsIfExists({
            success: function() {
              return document.location.reload();
            }
          });
        }
      },
      error: function(error) {
        console.log("Could not load config, initializing Phonegap files");
        $("body").html("<div id='phonemeSelector'>" + _.map("Preparing Papaya for it's first run...".split(""), function(letter) {
          if (letter === " ") {
            return "<br/>";
          } else {
            return "<span style='width:20px;height:20px' class='phoneme-button button'>" + letter + "</span>";
          }
        }).join("") + "</div>");
        return Papaya.initializePhonegapFiles();
      }
    });
  }, false);
} else {
  Papaya.loadConfig();
  Backbone.history.start();
  Papaya.recorder = new RecordAudio();
}
