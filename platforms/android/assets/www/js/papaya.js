// Generated by CoffeeScript 1.9.3
var Papaya, RecordAudio, Router, appName, clickortouch, directoryPath, filenameUnicodeTranslated, languageAsId, serverPath,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

appName = "Papaya";

directoryPath = "/sdcard/" + appName;

serverPath = "http://papaya.tangerinecentral.org";

_.mixin(_.str.exports());

languageAsId = function(language) {
  return language.replace(/\s/, "-");
};

filenameUnicodeTranslated = function(filename) {
  var basename, dirname, filenameSplit;
  filenameSplit = filename.split(/\//);
  basename = filenameSplit.pop();
  dirname = filenameSplit.join("/");
  console.log(dirname + "/" + _(basename.substr(0, basename.length - 4).split("")).map(function(char) {
    return char.charCodeAt(0);
  }).join("_") + ".mp3");
  return dirname + "/" + _(basename.substr(0, basename.length - 4).split("")).map(function(char) {
    return char.charCodeAt(0);
  }).join("_") + ".mp3";
};

Papaya = (function() {
  function Papaya() {}

  Papaya.updateLanguages = function() {
    var available_languages;
    available_languages = _.keys(Papaya.config.languages);
    return $("#languageSelector").html(_.map(available_languages, function(language) {
      console.log(language);
      return "<a id='" + (languageAsId(language)) + "' class='language' href='#language/" + language + "'>" + language + "</a>";
    }).join(""));
  };

  Papaya.loadConfig = function(options) {
    var pathToConfig;
    pathToConfig = "config.json";
    return $.ajax({
      url: pathToConfig,
      dataType: "json",
      error: function(result) {
        console.log("Error downloading config file from '" + pathToConfig + "': " + (JSON.stringify(result)));
        return options != null ? typeof options.error === "function" ? options.error(result) : void 0 : void 0;
      },
      success: (function(_this) {
        return function(result) {
          Papaya.config = result;
          console.log("Successfully loaded config from '" + pathToConfig + "'. Using config: " + (JSON.stringify(Papaya.config)));
          Papaya.updateLanguages();
          return options != null ? typeof options.success === "function" ? options.success(result) : void 0 : void 0;
        };
      })(this)
    });
  };

  Papaya.onPhonegap = function() {
    return document.URL.indexOf('http://') === -1 && document.URL.indexOf('https://') === -1;
  };

  Papaya.updatePhonemes = function() {
    var buttonCounter, columnLimit, heightMultiplier, phonemes, ref;
    if ($(window).width() > $(window).height()) {
      heightMultiplier = .7;
    } else {
      heightMultiplier = .7;
    }
    $('#phonemeSelector').css({
      width: $(window).width() - 20,
      height: $(window).height() * heightMultiplier,
      overflow: "scroll"
    });
    phonemes = $("#availablePhonemes").val().split(/, */);
    buttonCounter = 0;
    console.log($("a.language.selected").text());
    columnLimit = (ref = Papaya.config.languages[$("a.language.selected").text()].keyboard) != null ? ref.columns : void 0;
    $('#phonemeSelector').html(_.map(phonemes, function(phoneme, index) {
      var extraEnglishPhonemeSounds, result;
      result = "<span class='phoneme-button button'>" + phoneme + "</span> ";
      if (((buttonCounter += 1) % columnLimit) === 0) {
        result += "<br/>";
      }
      if (phoneme === "z" && $("a.language.selected").text() === "English") {
        extraEnglishPhonemeSounds = true;
        result = result + ("<span style='background-color:#efefeb;' class='phoneme-button '>&nbsp;</span>" + (((buttonCounter += 1) % columnLimit) === 0 ? "<br/>" : "") + " ");
        console.log(buttonCounter);
      }
      return result;
    }).join(""));
    $('#phonemeSelector').append("<br/> <span class='phoneme-button button meta'>space</span> <span class='phoneme-button button meta'>delete</span> <span class='phoneme-button button meta'>clear</span> <!-- Doesn't make sense for this script <span id='shift' class='phoneme-button button meta'>shift</span> --> <!-- This works but removed in case of confusion <span id='playSounds' class='phoneme-button button meta'>play</span> --> <br/> <br/> <span id='recording-buttons'> <span id='record-start-stop' class='button record'>record my voice</span> <span id='record-play' style='display:none' class='button record'>play my voice</span> </span>");
    $("#record-start-stop").click(function() {
      if ($("#record-start-stop").html() === "record my voice") {
        return Papaya.record();
      } else {
        return Papaya.stop();
      }
    });
    return $("#record-play").click(function() {
      if ($("#record-play").html() === "play my voice") {
        $("#record-play").html("stop playing my voice");
        return Papaya.recorder.play({
          done: function() {
            $("#record-play").removeClass("playing");
            return $("#record-play").html("play my voice");
          }
        });
      } else {
        $("#record-play").removeClass("playing");
        $("#record-play").html("play my voice");
        return Papaya.recorder.stop();
      }
    });
  };

  Papaya.updateCreatedWordsDivSize = function() {
    var heightMultiplier;
    if ($(window).width() > $(window).height()) {
      heightMultiplier = .3;
    } else {
      heightMultiplier = .3;
    }
    $('#createdWords').css({
      width: $(window).width() - 20,
      height: $(window).height() * heightMultiplier
    });
    $('#createdWords').html($('#createdWords').text());
    return textFit($('#createdWords').show(), {
      multiLine: true,
      maxFontSize: 200,
      alignHoriz: true,
      alignVert: true
    });
  };

  Papaya.play = function(filename, button) {
    var ref, url;
    if (Papaya.onPhonegap()) {
      if ((ref = Papaya.media) != null) {
        ref.release();
      }
      button.addClass("playing");
      url = "/android_asset/www/languages/" + ($("a.language.selected").text()) + "/" + filename;
      console.log("Playing " + url);
      Papaya.media = new Media(url, function() {
        return button.removeClass("playing");
      });
      return Papaya.media.play();
    } else {
      $("#jplayer").jPlayer("setMedia", {
        mp3: "languages/" + ($("a.language.selected").text()) + "/" + filename
      });
      return $("#jplayer").jPlayer("play");
    }
  };

  Papaya.record = function() {
    $("#record-start-stop").addClass("recording");
    $("#record-start-stop").html("stop recording");
    Papaya.recorder.record();
    return this.autoStop = _.delay(this.stop, Papaya.config.maxRecordTime);
  };

  Papaya.stop = function() {
    $("#record-start-stop").removeClass("recording");
    $("#record-start-stop").html("record my voice");
    Papaya.recorder.stop();
    return clearTimeout(this.autoStop);
  };

  return Papaya;

})();

Router = (function(superClass) {
  extend(Router, superClass);

  function Router() {
    this.changeLanguage = bind(this.changeLanguage, this);
    return Router.__super__.constructor.apply(this, arguments);
  }

  Router.prototype.routes = {
    "": "listenPhonemes",
    "downloadLanguages": "downloadLanguages",
    "joinPhonemes": "joinPhonemes",
    "availablePhonemes": "availablePhonemes",
    "listenPhonemes": "listenPhonemes",
    "language/:language": "changeLanguage",
    "selectLanguage": "selectLanguage"
  };

  Router.prototype.downloadLanguages = function() {
    var available_languages;
    $("#downloadLanguages").show();
    $("#downloadLanguages").html("<div> Currently Loaded Languages:<br/> " + (available_languages = _.keys(Papaya.config.languages), _.map(available_languages, function(language) {
      return "" + language;
    }).join("<br/>")) + " </div> <br/> <div> Languages available for update/download: <div id='languages_available_for_downloading'></div> </div> <button type='button' id='add_update_selected_languages'>Add/update selected languages</button>");
    return $.ajax({
      url: serverPath + "/languages",
      dataType: "json",
      error: function(error) {
        return console.log(JSON.stringify(error));
      },
      success: function(result) {
        return $('#languages_available_for_downloading').html("" + (_.map(result, function(language) {
          return "<label for='download-" + language + "'>" + language + "</label> <input id='download-" + language + "' value='" + language + "' class='check' type='checkbox' " + (_.contains(available_languages, language) ? 'checked=\'true\'' : '') + "></input><br/>";
        }).join("")));
      }
    });
  };

  Router.prototype.updateLanguage = function() {
    Papaya.updatePhonemes();
    $(".phoneme-selector").hide();
    $(".created-words").hide();
    $("span.meta").hide();
    $(".listen-phonemes").hide();
    $("#recording-buttons").hide();
    return $("#voice-selector").hide();
  };

  Router.prototype.changeLanguage = function(language) {
    var languageSettings;
    $("a.language").removeClass("selected");
    $("#" + (languageAsId(language))).addClass("selected");
    languageSettings = Papaya.config.languages[language];
    $('#availablePhonemes').val(languageSettings.phonemes);
    if (typeof languageSettings.onLoad === "function") {
      languageSettings.onLoad();
    }
    $("#voice-selector").html(_.map(languageSettings.voices, function(voice) {
      return "<span class='voice' id='voice-" + voice + "'>" + voice + "</span> ";
    }).join(""));
    $($(".voice")[0]).addClass("selected");
    this.updateLanguage();
    return this.listenPhonemes();
  };

  Router.prototype.selectLanguage = function() {};

  Router.prototype.availablePhonemes = function() {
    $("#content>div").hide();
    $(".listen-phonemes").hide();
    $(".available-phonemes").show();
    return $("#voice-selector").hide();
  };

  Router.prototype.joinPhonemes = function() {
    $("#content>div").hide();
    $(".listen-phonemes").hide();
    $(".phoneme-selector").show();
    $(".created-words").show();
    $("#recording-buttons").hide();
    $("span.meta").show();
    $("#voice-selector").hide();
    return $(".extra").hide();
  };

  Router.prototype.listenPhonemes = function() {
    $(".phoneme-selector").show();
    $(".listen-phonemes").show();
    $("#recording-buttons").show();
    $("span.meta").hide();
    $("#voice-selector").show();
    return $(".extra").show();
  };

  return Router;

})(Backbone.Router);

RecordAudio = (function() {
  function RecordAudio() {
    this.play = bind(this.play, this);
    this.stop = bind(this.stop, this);
    this.record = bind(this.record, this);
    this.status = "stopped";
    this.filename = "recording.wav";
    if (Papaya.onPhonegap()) {
      this.recordedSound = new Media(this.filename);
    } else {
      Recorder.initialize({
        swfSrc: "js/recorder.swf"
      });
    }
  }

  RecordAudio.prototype.record = function() {
    if (Papaya.onPhonegap()) {
      return this.recordedSound.startRecord();
    } else {
      return Recorder.record();
    }
  };

  RecordAudio.prototype.stop = function() {
    var ref;
    if (Papaya.onPhonegap()) {
      this.recordedSound.stopRecord();
      if ((ref = this.media) != null) {
        ref.stop();
      }
    } else {
      Recorder.stop();
    }
    return $("#record-play").show();
  };

  RecordAudio.prototype.play = function(options) {
    var ref;
    if (Papaya.onPhonegap()) {
      if ((ref = this.media) != null) {
        ref.stop();
      }
      this.media = new Media(this.filename, options.done);
      this.media.play();
    } else {
      Recorder.play({
        finished: options.done
      });
    }
    return $("#record-play").addClass("playing");
  };

  return RecordAudio;

})();

$(document).on("change", "#availablePhonemes", Papaya.updatePhonemes);

clickortouch = Papaya.onPhonegap() ? "touchend" : "click";

$(document).on(clickortouch, ".phoneme-button", function(event) {
  var button, filename, phoneme;
  button = $(event.target);
  phoneme = button.text();
  $("#listen-status").html(phoneme);
  filename = ($("#voice-selector span.selected").text()) + "_" + phoneme + ".mp3";
  if (Papaya.config.languages[$("a.language.selected").text()].unicode) {
    filename = filenameUnicodeTranslated(filename);
  }
  Papaya.play(filename, button);
  return _.delay(function() {
    return $("#listen-status").html("");
  }, 1000);
});

$("#voice-selector").on("click", "span", function(event) {
  $(event.target).siblings().removeClass("selected");
  return $(event.target).addClass("selected");
});

$("#downloadLanguages").on("click", "#add_update_selected_languages", function(event) {
  return Papaya.downloadLanguageJson(_.pluck($(".check:checked"), "value"), function() {
    return Papaya.loadConfig({
      error: function(error) {
        return console.log("Error loading config file: " + error);
      },
      success: function() {
        return Papaya.downloadLanguageSoundFiles();
      }
    });
  });
});

$(document).ready(function() {
  return $("#jplayer").jPlayer({
    error: function(error) {
      var filename, phoneme;
      if (error.jPlayer.error.type === "e_url") {
        phoneme = $("#listen-status").text();
        filename = ($("#voice-selector span.selected").text()) + "_" + phoneme + ".mp3";
        return $("#listen-status").append("<br><span style='font-size:20px'>No sound file available (" + filename + ")</span>");
      }
    }
  });
});

Papaya.config = {};

console.log("ZZZZZ");

Papaya.updateCreatedWordsDivSize();

window.addEventListener("resize", function() {
  Papaya.updateCreatedWordsDivSize();
  return Papaya.updatePhonemes();
}, false);

window.router = new Router();

if (Papaya.onPhonegap()) {
  console.log("AAAAA");
  document.addEventListener("deviceready", function() {
    console.log("CCCCC");
    Papaya.recorder = new RecordAudio();
    Papaya.loadConfig();
    return Backbone.history.start();
  });
} else {
  console.log("BBBB");
  Papaya.loadConfig();
  Backbone.history.start();
  Papaya.recorder = new RecordAudio();
}

//# sourceMappingURL=papaya.js.map
